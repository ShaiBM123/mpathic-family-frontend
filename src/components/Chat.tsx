import {useMemo, useCallback, useEffect} from "react";
import { MainContainer, Sidebar, ConversationList, Conversation, Avatar, ChatContainer, ConversationHeader, MessageGroup, Message,MessageList, MessageInput, TypingIndicator, MessageModel } from "@chatscope/chat-ui-kit-react";

import {
    useChat,
    ChatMessage,
    MessageContentType,
    MessageDirection,
    MessageStatus
} from "@chatscope/use-chat";

import {MessageContent, TextContent, User} from "@chatscope/use-chat";
import {ReactTyped} from "react-typed";
import {openAIModel} from "../data/data"

import {FeelingsScale} from "./feelings-scale/FeelingsScale"

import "./typing-payload/typing-payload.css"
// import { number, string } from "zod";

export const Chat = ({user}:{user:User}) => {

    // Get all chat related values and methods from useChat hook 
    const {
        currentMessages, conversations, activeConversation, setActiveConversation,  sendMessage, addMessage, 
        getUser, currentMessage, setCurrentMessage, updateMessage, sendTyping, setCurrentUser
    } = useChat();
    
    useEffect( () => {
        setCurrentUser(user);
    },[user, setCurrentUser]);
    
    // show chatbot introductory message on mount
    useEffect( () => {
        if(
            activeConversation && 
            currentMessages.length === 0 &&
            user.username!== openAIModel.name &&
            activeConversation.participants.length === 1 && 
            activeConversation.participantExists(openAIModel.name)){

                for(let init_msg of openAIModel.initial_messages)
                {
                    const message = new ChatMessage({
                        id: "", // Id will be generated by storage generator, so here you can pass an empty string
                        content: init_msg as unknown as MessageContent<TextContent>,
                        contentType: MessageContentType.TextPlain,
                        senderId: openAIModel.name,
                        direction: MessageDirection.Incoming,
                        status: MessageStatus.Sent
                    });
            
                    addMessage(message, activeConversation.id, true); 
                }
        }
    },[activeConversation, addMessage, currentMessages.length, user.username]);

    // Get current user data
    const [currentUserAvatar, currentUserName] = useMemo(() => {

        if (activeConversation) {
            const participant = activeConversation.participants.length > 0 ? activeConversation.participants[0] : undefined;

            if (participant) {
                const user = getUser(participant.id);
                if (user) {
                    return [<Avatar src={user.avatar} />, user.username]
                }
            }
        }

        return [undefined, undefined];

    }, [activeConversation, getUser]);

    const handleChange = (value:string) => {
        // Send typing indicator to the active conversation
        // You can call this method on each onChange event
        // because sendTyping method can throttle sending this event
        // So typing event will not be send to often to the server
        setCurrentMessage(value);
        if ( activeConversation ) {
            sendTyping({
                conversationId: activeConversation?.id,
                isTyping:true,
                userId: user.id,
                content: value, // Note! Most often you don't want to send what the user types, as this can violate his privacy!
                throttle: true
            });
        }
        
    }
    
    const handleSend = (innerHtml: string, text: string) => {

        const message = new ChatMessage({
            id: "", // Id will be generated by storage generator, so here you can pass an empty string
            content: text as unknown as MessageContent<TextContent>,
            contentType: MessageContentType.TextPlain,
            senderId: user.id,
            direction: MessageDirection.Outgoing,
            status: MessageStatus.Sent
        });
        
        if ( activeConversation ) {
            sendMessage({
                message,
                conversationId: activeConversation.id,
                senderId: user.id,
            });
        }
    };
    

    const getTypingIndicator = useCallback(
        () => {
                if (activeConversation) {
                    const typingUsers = activeConversation.typingUsers;
                    if (typingUsers.length > 0) {
                        const typingUserId = typingUsers.items[0].userId;
                        // Check if typing user participates in the conversation
                        if (activeConversation.participantExists(typingUserId)) {
                            const typingUser = getUser(typingUserId);
                            if (typingUser) {
                                if (typingUserId === openAIModel.name)
                                return <TypingIndicator content={`${typingUser.username} is replying`} />
                                else 
                                return <TypingIndicator content={`${typingUser.username} is typing`} />
                            }
                        }
                    }
                }
            return undefined;

        }, [activeConversation, getUser],
    );
    
    const createMessageModel = useCallback(

        (m: ChatMessage<MessageContentType>) => {
            let message_type;
            let message_payload;

            if(m.status === MessageStatus.DeliveredToDevice && 
                m.contentType === MessageContentType.TextPlain) 
            {
                message_type = "custom";
                message_payload=
                <ReactTyped 
                    className="text-typing-message-container"
                    strings={[String(m.content)]} 
                    typeSpeed={10} 
                    showCursor={true} 
                    onComplete={()=>{
                            m.status=MessageStatus.Sent
                            updateMessage(m)
                        }}/> 
            }
            else if (m.status === MessageStatus.DeliveredToDevice && 
                m.contentType === MessageContentType.Other){
                    if ('feelings' in m.content){
                        message_type = "custom";
                        message_payload= <FeelingsScale feelings={Object(m.content).feelings} onRescaleDone={(f)=>{
                            console.log('onRescaleDone: ')
                            for(let idx in f)
                            { 
                                console.log(f[Number(idx)]);
                            }
                           
                        }}/>
                    }
            }
            else{
                message_type = 
                m.contentType === MessageContentType.Other ? "custom": 
                m.contentType === MessageContentType.TextHtml ? "html": 
                m.contentType === MessageContentType.Image ? "image": 
                m.contentType === MessageContentType.TextPlain ? "text" : 
                "";
                message_payload = m.content
            
            }
            let model={
                type: message_type,
                payload: message_payload,
                direction: m.direction,
                position: "normal"
            }
            return model as MessageModel;
        }
        ,
        [updateMessage]
    );

    const getOppositeMessageDirection = useCallback(
        (d: MessageDirection)=>{
            if (d===MessageDirection.Incoming)
                return MessageDirection.Outgoing
            else return MessageDirection.Incoming
        }, []
    )

    return (<MainContainer responsive>
        <Sidebar position="left" scrollable>
            <ConversationHeader style={{backgroundColor:"#fff"}}>
                <Avatar src={user.avatar} />
                <ConversationHeader.Content>
                    {user.username}
                </ConversationHeader.Content>
            </ConversationHeader>
            <ConversationList>
                {conversations.map(c => {
                    // Helper for getting the data of the first participant
                    const [avatar, name] = (() => {
                        const participant = c.participants.length > 0 ? c.participants[0] : undefined;
                        if (participant) {
                            const user = getUser(participant.id);
                            if (user) {
                                return [<Avatar src={user.avatar} />, user.username]
                            }
                        }
                        return [undefined, undefined]
                    })();

                    return <Conversation key={c.id}
                                  name={name}
                                  info={c.draft ? `Draft: ${c.draft.replace(/<br>/g,"\n").replace(/&nbsp;/g, " ")}` : ``}
                                  active={activeConversation?.id === c.id}
                                  unreadCnt={c.unreadCounter}
                                  onClick={() => setActiveConversation(c.id)}>
                        {avatar}
                    </Conversation>
                })}
            </ConversationList>
        </Sidebar>
        
        <ChatContainer>
            {activeConversation && <ConversationHeader>
                {currentUserAvatar}
                <ConversationHeader.Content userName={currentUserName} />
            </ConversationHeader>}
            <MessageList typingIndicator={getTypingIndicator()}>
                {activeConversation && currentMessages.map( (g) => 
                    <MessageGroup key={g.id} 
                        direction={process.env.REACT_APP_RTL ==='yes' ? 
                            getOppositeMessageDirection(g.direction): g.direction}>
                        <Avatar src={user.id === g.senderId ? user.avatar: getUser(g.senderId)?.avatar} />
                        <MessageGroup.Messages>
                            {g.messages.map((m:ChatMessage<MessageContentType>) => 
                                <Message 
                                    key={m.id} 
                                    model={createMessageModel(m)} 
                                    className={process.env.REACT_APP_RTL ==='yes' ? "rtl-message" : ""}/>)}
                        </MessageGroup.Messages>
                </MessageGroup>) }
            </MessageList>
            <MessageInput 
                className={process.env.REACT_APP_RTL ==='yes' ? "rtl-message" : ""}
                value={currentMessage} 
                onChange={handleChange} 
                onSend={handleSend} 
                disabled={!activeConversation} 
                attachButton={false} 
                placeholder={process.env.REACT_APP_RTL ==='yes' ? "הקלד כאן ..." : "Type here..."}/>
        </ChatContainer>
        
    </MainContainer>);
    
}