import { useMemo, useCallback, useEffect } from "react";
import {
    MainContainer,
    // Sidebar, 
    // ConversationList, 
    // Conversation, 
    Avatar,
    ChatContainer,
    ConversationHeader,
    MessageGroup,
    Message,
    MessageList,
    MessageInput,
    TypingIndicator,
    MessageModel,
    Button
} from "@chatscope/chat-ui-kit-react";

import { useExtendedChat } from "./ExtendedChatProvider";
import {
    // useChat,
    ChatMessage,
    MessageContentType,
    MessageDirection,
    MessageStatus
} from "@chatscope/use-chat";

import { MessageContent, User } from "@chatscope/use-chat";
import { UserMessageContent, UserMessagePhase } from "../open_ai/OpenAITypes";
// import { ReactTyped } from "react-typed";
import { Gender, avatars, openAIModel, openAIConversationId } from "../data/data";
import {
    interPersonalTopicsDictionary,
    InterPersonalTopics,
    TopicCategoryLevel
} from "../components/inter-personal-topics/InterPersonalTopics";
import { Observation } from "../components/observation/Observation";
import { FeelingsScale } from "../components/feelings-scale/FeelingsScale";
import { TypingText } from "../components/typing-text/TypingText";
import { completeUserPartOfSpeech } from "../open_ai/OpenAIPromptingManager"
// import { UserForm } from "../components/user-form/UserForm";
import { OptionButtonsInColumn, OptionButtonsInRow } from "../components/option-buttons-list/OptionButtonsInList";
import { formatMessage, enumKeyStartsWith } from "../utils/utils";

import messages from '../messages.json';

import svgMpathicTitle from "../assets/mpathic-family-title.svg";
import svgUndo from "../assets/undo.svg";
import svgRedo from "../assets/redo.svg";
import svgKebabMenu from "../assets/kebab-menu.svg";
import "../components/typing-text/typing-text.css"


export const Chat = ({ user }: { user: User }) => {

    // Get all chat related values and methods from useChat hook 
    const {
        currentMessages, activeConversation, setActiveConversation, sendMessage, addMessage,
        getUser, currentMessage, setCurrentMessage, updateMessage, sendTyping, setCurrentUser,
        currentUser, removeMessagesFromConversation,
        setTopic, setSubTopic, setPhase, removeMessageFromActiveConversation, addOpenAIHistoryText,
        phase, phaseCount, moreUserInputRequired
    } = useExtendedChat();

    useEffect(() => {
        setCurrentUser(user);
    }, [user, setCurrentUser]);

    useEffect(() => {
        setActiveConversation(openAIConversationId)
    }, [setActiveConversation]);


    const scrollToTop = useCallback(() => {
        const timer = setTimeout(() => {
            const msgGroup = document.getElementsByClassName('cs-message-group')[0];

            if (!msgGroup) {
                return;
            }

            msgGroup.scrollIntoView({ behavior: 'auto', block: 'start' });

        }, 200);

        return () => clearTimeout(timer);

    }, [])

    // const scrollToTop = useCallback(() => {
    //     document.getElementsByClassName('cs-message-group')[0]?.scrollIntoView(
    //         { behavior: 'auto', block: 'start' })

    // }, [])

    const scrollToBottom = useCallback(() => {
        document.getElementsByClassName('cs-message-list__scroll-to')[0]?.scrollIntoView({ behavior: 'auto', block: 'end' })
    }, [])

    const addChatBotMsg = useCallback((content: unknown, contentType: MessageContentType) => {
        activeConversation &&
            addMessage(new ChatMessage({
                id: "", // Id will be generated by storage generator, so here you can pass an empty string
                content: content as MessageContent<MessageContentType>,
                contentType: contentType,
                senderId: openAIModel.name,
                direction: MessageDirection.Incoming,
                status: MessageStatus.DeliveredToDevice
            }), activeConversation.id, true);
    }, [activeConversation, addMessage])

    // show chatbot introductory message on mount
    useEffect(() => {
        if (activeConversation && currentUser && currentMessages.length === 0) {

            if (Object.keys(currentUser.data).length === 0) {
                setPhase(UserMessagePhase.FE_User1stTimeApproval)
                addChatBotMsg(messages.user1stTimeWelcomeMsg, MessageContentType.TextHtml);
                addChatBotMsg(
                    {
                        active: true,
                        id: "user_1st_time_welcome_approval"
                    }, MessageContentType.Other);
            }
            else {
                let uName = currentUser?.firstName;
                let uPoS = completeUserPartOfSpeech(currentUser);
                setPhase(UserMessagePhase.FE_MainTopic)
                addChatBotMsg(
                    {
                        message: formatMessage(
                            currentUser.data.gender === Gender.Male ?
                                messages.user2ndTimeMainTopicMsg.male : messages.user2ndTimeMainTopicMsg.female,
                            { name: uName }),
                        id: "intro_msg"
                    }, MessageContentType.Other);
                addChatBotMsg(
                    {
                        ...interPersonalTopicsDictionary,
                        active: true,
                        selected: false,
                        selected_categories: null,
                        id: "inter_personal_topics"
                    }, MessageContentType.Other);
            }
        }
    }, [activeConversation, addChatBotMsg, currentMessages.length, currentUser, setPhase]);

    // Get current user data
    // const [currentUserAvatar, currentUserName] = useMemo(() => {
    //     if (activeConversation) {
    //         const participant = activeConversation.participants.length > 0 ? activeConversation.participants[0] : undefined;
    //         if (participant) {
    //             const user = getUser(participant.id);
    //             if (user) {
    //                 return [<Avatar src={user.avatar} />, user.username]
    //             }
    //         }
    //     }
    //     return [undefined, undefined];
    // }, [activeConversation, getUser]);

    const handleChange = (value: string) => {
        // Send typing indicator to the active conversation
        // You can call this method on each onChange event
        // because sendTyping method can throttle sending this event
        // So typing event will not be send to often to the server
        setCurrentMessage(value);
        if (activeConversation) {
            sendTyping({
                conversationId: activeConversation?.id,
                isTyping: true,
                userId: user.id,
                content: value, // Note! Most often you don't want to send what the user types, as this can violate his privacy!
                throttle: true
            });
        }
    }

    const createUserMessage = useCallback((text: string): ChatMessage<any> => {
        return new ChatMessage({
            id: "", // Id will be generated by storage generator, so here you can pass an empty string
            // content: text as unknown as MessageContent<TextContent>,
            content: { user_text: text } as UserMessageContent,
            contentType: MessageContentType.Other,
            senderId: user.id,
            direction: MessageDirection.Outgoing,
            status: MessageStatus.Sent
        });
    }, [user.id])

    // JUST ADD USER MESSAGE WITHOUT SENDING IT FORWARDED TO THE SERVER
    const addUserMsg = useCallback((text: string) => {
        activeConversation &&
            addMessage(createUserMessage(text), activeConversation.id, true);
    }, [activeConversation, addMessage, createUserMessage])



    const doSend = (text: string) => {
        handleSend('', text)
    }

    const handleSend = (innerHtml: string, text: string) => {

        if (enumKeyStartsWith(UserMessagePhase, phase, 'FE_')) {
            let uGender: Gender = user?.data?.gender;
            setCurrentMessage("");
            addUserMsg(text)
            switch (phase) {
                case UserMessagePhase.FE_UserName:
                    setPhase(UserMessagePhase.FE_UserAge)
                    user.firstName = text;
                    setCurrentUser(user)
                    addChatBotMsg(messages.whatIsYourAge, MessageContentType.TextHtml);
                    break;
                case UserMessagePhase.FE_UserAge:
                    setPhase(UserMessagePhase.FE_MainTopic)
                    user.data.age = text;
                    setCurrentUser(user)
                    addChatBotMsg(uGender === Gender.Male ? messages.user1stTimeGreeting.male : messages.user1stTimeGreeting.female, MessageContentType.TextHtml);
                    addChatBotMsg(uGender === Gender.Male ? messages.user1stTimeMainTopicMsg.male : messages.user1stTimeMainTopicMsg.female, MessageContentType.TextHtml);
                    addChatBotMsg(
                        {
                            ...interPersonalTopicsDictionary,
                            active: true,
                            selected: false,
                            id: "inter_personal_main_topics"
                        }, MessageContentType.Other);
                    break;
            }
        }
        else {
            const message = createUserMessage(text);
            if (activeConversation) {
                sendMessage({
                    message,
                    conversationId: activeConversation.id,
                    senderId: user.id,
                });
            }
        }
    };


    const getTypingIndicator = useCallback(
        () => {
            if (activeConversation) {
                const typingUsers = activeConversation.typingUsers;
                if (typingUsers.length > 0) {
                    const typingUserId = typingUsers.items[0].userId;
                    // Check if typing user participates in the conversation
                    if (activeConversation.participantExists(typingUserId)) {
                        const typingUser = getUser(typingUserId);
                        if (typingUser) {
                            if (typingUserId === openAIModel.name)
                                return <TypingIndicator content={`${typingUser.username} is replying`} />
                            else
                                return <TypingIndicator content={`${typingUser.username} is typing`} />
                        }
                    }
                }
            }
            return undefined;

        }, [activeConversation, getUser],
    );

    const createMessageModel =
        (chat_msg: ChatMessage<MessageContentType>) => {
            // let uName = user?.firstName;
            let uGender = user?.data?.gender;
            let uPoS = completeUserPartOfSpeech(user);

            let message_type;
            let message_payload;
            if (chat_msg.direction === MessageDirection.Incoming) {

                if (chat_msg.status === MessageStatus.DeliveredToDevice &&
                    chat_msg.contentType === MessageContentType.TextPlain) {

                    message_type = "custom";
                    message_payload = <TypingText
                        chatMsg={chat_msg}
                        chatMsgContentToStrings={(c: Object) => { return [c as string] }}
                        onStringTyped={() => {
                            scrollToBottom()
                        }} />
                }
                else if (chat_msg.status === MessageStatus.DeliveredToDevice &&
                    chat_msg.contentType === MessageContentType.Other) {

                    message_type = "custom";
                    let obj = Object(chat_msg.content)

                    if (obj.id === "user_1st_time_welcome_approval") {
                        message_payload =
                            <OptionButtonsInRow
                                buttonsData={[
                                    { id: "Ok", text: "בטח" },
                                    { id: "NextTime", text: "בפעם אחרת" }
                                ]}
                                onButtonClick={
                                    (id) => {
                                        if (id === "Ok") {
                                            setPhase(UserMessagePhase.FE_UserGender)
                                            removeMessageFromActiveConversation(chat_msg.id)
                                            addUserMsg("בטח")
                                            addChatBotMsg(messages.user1stTimeFewQMsg, MessageContentType.TextHtml);
                                            addChatBotMsg(messages.howToApproachYou, MessageContentType.TextHtml);
                                            addChatBotMsg({ active: true, id: "ask_user_male_or_female" }, MessageContentType.Other);
                                        }
                                    }
                                }
                            />
                    }
                    else if (obj.id === "ask_user_male_or_female") {
                        message_payload =
                            <OptionButtonsInRow
                                buttonsData={[
                                    { id: "male", text: "בלשון זכר" },
                                    { id: "female", text: "בלשון נקבה" }
                                ]}
                                onButtonClick={
                                    (id) => {
                                        removeMessageFromActiveConversation(chat_msg.id)
                                        if (id === "male") {
                                            user.data.gender = Gender.Male;
                                            addUserMsg("בלשון זכר");
                                        }
                                        else if (id === "female") {
                                            user.data.gender = Gender.Female;
                                            addUserMsg("בלשון נקבה");
                                        }
                                        setCurrentUser(user)
                                        setPhase(UserMessagePhase.FE_UserName)
                                        addChatBotMsg(messages.whatIsYourName, MessageContentType.TextHtml);
                                    }
                                }
                            />
                    }
                    else if (obj.id === "intro_msg") {

                        // a separate module should be implemented instaed displaying just typed text 
                        message_payload =
                            <TypingText
                                chatMsg={chat_msg}
                                chatMsgContentToStrings={(c: Object) => {
                                    return [Object(c).message]
                                }}
                                onStringTyped={() => {
                                    // scrollToTop()
                                }}
                            />
                    }
                    else if (obj.id === "inter_personal_main_topics") {
                        message_payload =
                            <OptionButtonsInColumn
                                buttonsData={
                                    Object.entries(obj.major_categories).map(([t_key, t_dct], idx) => {
                                        return {
                                            id: t_key,
                                            text: Object(t_dct).title,
                                            iconSrc: Object(t_dct).iconSrc
                                        }
                                    })
                                }
                                onButtonClick={
                                    (id) => {
                                        obj.selected = true;
                                        obj.active = false;
                                        let category = obj.major_categories[id];
                                        setTopic(category.description !== undefined ? category.description : category.title)
                                        removeMessageFromActiveConversation(chat_msg.id)
                                        addUserMsg(category.title);
                                        if (category.title === "אחר") {
                                            setPhase(UserMessagePhase.BE_PersonInConflictRelation)
                                            addChatBotMsg(
                                                uGender === Gender.Male ?
                                                    messages.userPersonInConflictRelationMsg.male :
                                                    messages.userPersonInConflictRelationMsg.female,
                                                MessageContentType.TextHtml);
                                        } else {
                                            setPhase(UserMessagePhase.FE_SubTopic)
                                            addChatBotMsg(
                                                uGender === Gender.Male ?
                                                    messages.userSubTopicMsg.male :
                                                    messages.userSubTopicMsg.female,
                                                MessageContentType.TextHtml);
                                            addChatBotMsg(
                                                {
                                                    ...obj.major_categories[id],
                                                    active: true,
                                                    selected: false,
                                                    id: "inter_personal_sub_topics"
                                                }, MessageContentType.Other);
                                        }
                                    }
                                }
                            />
                    }
                    else if (obj.id === "inter_personal_sub_topics") {
                        message_payload =
                            <OptionButtonsInColumn
                                buttonsData={
                                    Object.entries(obj.sub_categories).map(([t_key, t_dct], idx) => {
                                        return {
                                            id: t_key,
                                            text: Object(t_dct).title,
                                            bold: false
                                        }
                                    })
                                }
                                onButtonClick={
                                    (id) => {
                                        obj.selected = true;
                                        obj.active = false;
                                        let category = obj.sub_categories[id];
                                        setSubTopic(category.description !== undefined ? category.description : category.title)
                                        removeMessageFromActiveConversation(chat_msg.id)

                                        setPhase(UserMessagePhase.BE_PersonInConflictRelation)
                                        addUserMsg(category.title);
                                        addChatBotMsg(
                                            uGender === Gender.Male ?
                                                messages.userPersonInConflictRelationMsg.male :
                                                messages.userPersonInConflictRelationMsg.female,
                                            MessageContentType.TextHtml);

                                    }
                                }
                            />
                    }
                    else if (obj.id === "inter_personal_topics") {

                        message_payload =
                            <InterPersonalTopics
                                topics={obj.major_categories}
                                active={obj.active}
                                selected={obj.selected}
                                selectedCategories={obj.selected_categories}
                                doOnRender={scrollToTop}
                                onTopicSelection={(selected_categories) => {
                                    let topic = ' כללי';
                                    let subTopic = '';

                                    if (selected_categories.level === TopicCategoryLevel.Level_1) {
                                        topic = selected_categories.topics_titles[0]
                                        setTopic(topic)
                                    }
                                    else if (selected_categories.level === TopicCategoryLevel.Level_2) {
                                        topic = selected_categories.topics_titles[0]
                                        subTopic = selected_categories.topics_titles[1]
                                        setTopic(topic)
                                        setSubTopic(subTopic)
                                    }

                                    removeMessageFromActiveConversation(chat_msg.id)
                                    addUserMsg(
                                        topic === '' ? `הסיטואציה קשורה לנושא כללי` : `הסיטואציה קשורה לנושא ${topic}`
                                            + (subTopic === '' ? `` : ` ובפרט לגבי ${subTopic}`));

                                    setPhase(UserMessagePhase.BE_PersonInConflictRelation)
                                    addChatBotMsg(`מי האדם אליו ${uPoS.sbj2ndPronoun} מתייחס${uPoS.Taf} (לדוגמא ${uGender === Gender.Male ? "בת זוג" : "בן זוג"}, אח אחות וכולי) ?`, MessageContentType.TextPlain)
                                }}
                            />
                    }
                    else if (obj.id === "observation") {

                        // a separate module should be implemented instaed displaying just typed text 
                        message_payload =
                            <Observation
                                active={obj.active}
                                isCorrect={obj.isCorrect}
                                text={obj.observation}
                                onCorrectClick={() => {
                                    obj.isCorrect = true;
                                    obj.active = false;
                                    addOpenAIHistoryText("assistant", obj.observation);
                                    updateMessage(chat_msg);
                                    addChatBotMsg(`כעת בבקשה פרט קצת יותר על התחושות שלך בנוגע לכל מה שקרה`, MessageContentType.TextPlain)
                                    setPhase(UserMessagePhase.BE_FeelingsProbe)
                                }}
                                onNotAccurateClick={() => {
                                    obj.isCorrect = false;
                                    obj.active = false;
                                    updateMessage(chat_msg);
                                    let msg = phaseCount <= 1 ?
                                        Gender.Male ?
                                            messages.userCallForMoreAccurateObrInitialMsg.male :
                                            messages.userCallForMoreAccurateObrInitialMsg.female
                                        :
                                        Gender.Male ?
                                            messages.userCallForMoreAccurateObrFollowUpMsg.male :
                                            messages.userCallForMoreAccurateObrFollowUpMsg.female;

                                    addChatBotMsg(msg, MessageContentType.TextPlain)
                                    setPhase(UserMessagePhase.BE_ObservationAnalysis)
                                }}
                            />
                    }
                    else if (obj.id === "feelings") {

                        message_payload =
                            <FeelingsScale feelings={obj.feelings} active={obj.active}
                                onRescaleDone={(new_feelings, prompt_msg) => {
                                    obj.active = false
                                    obj.feelings = new_feelings
                                    updateMessage(chat_msg)
                                    doSend(prompt_msg)
                                }}
                            />
                    }
                }
                else if (chat_msg.status === MessageStatus.Sent &&
                    chat_msg.contentType === MessageContentType.Other) {

                    let obj = Object(chat_msg.content)
                    if (["intro_msg", "user_1st_time_welcome_msg"].includes(obj.id)) {
                        message_type = "text";
                        message_payload = obj.message;
                    }
                }
                else {

                    message_type =
                        chat_msg.contentType === MessageContentType.Other ? "custom" :
                            chat_msg.contentType === MessageContentType.TextHtml ? "html" :
                                chat_msg.contentType === MessageContentType.Image ? "image" :
                                    chat_msg.contentType === MessageContentType.TextPlain ? "text" :
                                        "";
                    message_payload = chat_msg.content

                }
            }
            else if (chat_msg.direction === MessageDirection.Outgoing) {
                message_type = "text";
                message_payload = (chat_msg.content as UserMessageContent).user_text;
            }

            let model = {
                type: message_type,
                payload: message_payload,
                direction: chat_msg.direction,
                position: "normal"
            }
            return model as MessageModel;
        };

    const toHoldTextInput = () => {

        for (let g of currentMessages) {
            for (let msg of g.messages) {
                if (msg.status === MessageStatus.DeliveredToDevice &&
                    msg.contentType === MessageContentType.Other &&
                    Object(msg.content).active) {
                    return true
                }
            }
        }
        return false
    }

    const getMsgCustomizedContentClasses = (m: ChatMessage<MessageContentType>) => {
        return (Object(m.content).id === "inter_personal_topics" ? 'card-message' : '').trim();
    }

    const rtl = process.env.REACT_APP_RTL
    const hold_text_input = toHoldTextInput()

    return (
        <MainContainer responsive>

            <ChatContainer>
                {activeConversation && <ConversationHeader>
                    <ConversationHeader.Content>
                        <div className="chat-header">
                            <img src={svgMpathicTitle} alt="Mpathic Family Title" />
                            <div className="buttons-wrapper">
                                <div className="buttons-container">
                                    <button>
                                        <img src={svgUndo} alt="Undo" />
                                    </button>
                                    <div>חזרה</div>
                                </div>
                                <div className="buttons-container redo-button-container">
                                    <button className="redo-button">
                                        <img src={svgRedo} alt="Redo" />
                                    </button>
                                    <div>קדימה</div>
                                </div>
                                <div className="buttons-container kebab-menu-container">
                                    <button>
                                        <img src={svgKebabMenu} alt="Menu" />
                                    </button>
                                    <div></div> {/* Empty caption with 18px height */}
                                </div>
                            </div>
                        </div>
                        {/* Other components and elements */}
                    </ConversationHeader.Content>
                </ConversationHeader>}

                <MessageList
                    typingIndicator={getTypingIndicator()}
                // autoScrollToBottom={true} 
                // autoScrollToBottomOnMount={false} 
                // scrollBehavior={"auto"}
                >

                    {activeConversation && currentMessages.map((g) =>
                        <MessageGroup key={g.id}
                            direction={g.direction}>
                            <Avatar src={user.id === g.senderId ? user.avatar : getUser(g.senderId)?.avatar} />
                            <MessageGroup.Messages>
                                {g.messages.map((m: ChatMessage<MessageContentType>) =>
                                    <Message
                                        key={m.id}
                                        model={createMessageModel(m)}
                                        className={(`${getMsgCustomizedContentClasses(m)}`).trim()} />)}
                            </MessageGroup.Messages>
                        </MessageGroup>)}
                </MessageList>
                <MessageInput
                    value={currentMessage}
                    onChange={handleChange}
                    onSend={handleSend}
                    disabled={!activeConversation || hold_text_input}
                    attachButton={false}
                    placeholder={rtl === 'yes' ? "הקלד כאן ..." : "Type here..."} />
            </ChatContainer>

        </MainContainer>
    );

}