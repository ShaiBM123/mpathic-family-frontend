import { MessageContentType, MessageDirection, MessageStatus } from "@chatscope/use-chat/dist/enums"; 
import { UserTypingEvent } from "@chatscope/use-chat/dist/events";
export interface IOpenAIBotCompleteMessage {

  /**
   * A unique identifier for the chat completion.
   */
    id: string;

    /**
     * The reason the model stopped generating tokens. This will be `stop` if the model
     * hit a natural stop point or a provided stop sequence, `length` if the maximum
     * number of tokens specified in the request was reached, `content_filter` if
     * content was omitted due to a flag from our content filters, `tool_calls` if the
     * model called a tool, or `function_call` (deprecated) if the model called a
     * function.
     */
    finish_reason: 'stop' | 'length' | 'tool_calls' | 'content_filter' | 'function_call';
  
    content: string | null;
    // content: TextContent
    // content: React.ReactNode;

    /**
     * The index of the choice in the list of choices.
     */
    index: number;

    /**
     * The refusal message generated by the model.
     */
    refusal: string | null;

    // other Chat related fields
    status: MessageStatus;
    contentType: MessageContentType;
    senderId: string;
    direction: MessageDirection;
    createdTime: Date;
    updatedTime?: Date;

  };

  export interface OpenAIMessageReceivedType {
    (created: Date, conversationId: string, messages: Array<IOpenAIBotCompleteMessage>, sender: unknown): void;
  }

  export interface OpenAIGeneratingMessageType {
    (conversationId: string, userId: string): void;
  }